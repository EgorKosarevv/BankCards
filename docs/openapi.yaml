---
openapi: 3.0.1
info:
  title: BankProject
  description: BankProject API
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - BearerAuth: []
tags:
  - name: Transfers
    description: Operations on transfers between cards
  - name: User
    description: Operations an users
  - name: Card
    description: Operations on cards
  - name: AdminCard
    description: Operations on cards only for admin
  - name: AdminUser
    description: Admin operations an users
  - name: Auth
    description: Operations related to user authentication and registration
paths:
  "/api/v1/cards/{cardId}/block-request":
    put:
      tags:
        - Card
      summary: Request card block
      description: Allows the user to request blocking their own active card.
      operationId: requestCardBlock
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  "/api/v1/cards/deposit":
    put:
      tags:
        - Card
      summary: Deposit funds to a card
      operationId: depositToCard
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CardDepositRequestDTO"
        required: true
      responses:
        '200':
          description: OK
  "/api/v1/admin/users/{userId}/status":
    put:
      tags:
        - AdminUser
      summary: Update user status
      description: Allows admins to change the status of a user (active, blocked)
      operationId: updateUserStatus
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserStatusUpdateRequestDTO"
        required: true
      responses:
        '200':
          description: OK
  "/api/v1/admin/users/{userId}/roles":
    put:
      tags:
        - AdminUser
      summary: Update user roles
      description: Allows admins to change user roles
      operationId: updateUserRoles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRoleUpdateRequestDTO"
        required: true
      responses:
        '200':
          description: OK
  "/api/v1/admin/cards/{cardId}/status":
    put:
      tags:
        - AdminCard
      summary: Change card status
      description: Change the status of a card (only ACTIVE and BLOCKED allowed).
      operationId: changeCardStatus
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CardStatusUpdateRequestDTO"
        required: true
      responses:
        '200':
          description: OK
  "/api/v1/transfers":
    post:
      tags:
        - Transfers
      summary: Transfer funds between user's own cards
      description: Allows a user to transfer money between their own active cards
      operationId: transferBetweenOwnCards
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CardTransferRequestDTO"
        required: true
      responses:
        '200':
          description: OK
  "/api/v1/auth/updateToken":
    post:
      tags:
        - Auth
      summary: Refresh Token
      description: Update the access token using a refresh token.
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RefreshTokenRequestDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserAuthResponseDTO"
  "/api/v1/auth/register":
    post:
      tags:
        - Auth
      summary: Register
      description: Register a new user in the system.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRegisterRequestDTO"
        required: true
      responses:
        '200':
          description: OK
  "/api/v1/auth/login":
    post:
      tags:
        - Auth
      summary: Login
      description: Authenticate a user and return access and refresh tokens.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserAuthRequestDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserAuthResponseDTO"
  "/api/v1/admin/cards":
    get:
      tags:
        - AdminCard
      summary: Get all cards with filtering and pagination
      operationId: getAllCards
      parameters:
        - name: ownerId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: last4
          in: query
          required: false
          schema:
            pattern: "^[0-9]{4}$"
            type: string
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - BLOCKED
              - DELETED
              - EXPIRED
        - name: blockRequested
          in: query
          required: false
          schema:
            type: boolean
        - name: minBalance
          in: query
          required: false
          schema:
            minimum: 0
            exclusiveMinimum: false
            type: number
        - name: maxBalance
          in: query
          required: false
          schema:
            minimum: 0
            exclusiveMinimum: false
            type: number
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property,(asc|desc). Default
          sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageCardSimpleResponseDTO"
    post:
      tags:
        - AdminCard
      summary: Create a new card
      description: Create a new card for the authenticated user.
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CardRequestDTO"
        required: true
      responses:
        '200':
          description: OK
  "/api/v1/users":
    get:
      tags:
        - User
      summary: Get user's cards with filtering and pagination
      operationId: getUserCards
      parameters:
        - name: ownerId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: last4
          in: query
          required: false
          schema:
            pattern: "^[0-9]{4}$"
            type: string
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - BLOCKED
              - DELETED
              - EXPIRED
        - name: blockRequested
          in: query
          required: false
          schema:
            type: boolean
        - name: minBalance
          in: query
          required: false
          schema:
            minimum: 0
            exclusiveMinimum: false
            type: number
        - name: maxBalance
          in: query
          required: false
          schema:
            minimum: 0
            exclusiveMinimum: false
            type: number
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property,(asc|desc). Default
          sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageCardSimpleResponseDTO"
  "/api/v1/users/profile":
    get:
      tags:
        - User
      summary: Get this profile
      operationId: getUserById
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserResponseDTO"
  "/api/v1/transfers/card/{cardId}":
    get:
      tags:
        - Transfers
      operationId: getCardTransfers
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property,(asc|desc). Default
          sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageTransferResponseDTO"
  "/api/v1/admin/users":
    get:
      tags:
        - AdminUser
      summary: Get all users with filtering and pagination
      operationId: getAllUsers
      parameters:
        - name: fullName
          in: query
          required: false
          schema:
            maxLength: 50
            minLength: 2
            pattern: "^[A-Za-zА-Яа-яЁё\\s'-]+$"
            type: string
        - name: phone
          in: query
          required: false
          schema:
            pattern: "^\\+?[0-9]$"
            type: string
        - name: role
          in: query
          required: false
          schema:
            type: string
            enum:
              - USER
              - ADMIN
        - name: enabled
          in: query
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property,(asc|desc). Default
          sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageUserResponseDTO"
  "/api/v1/admin/users/{userId}":
    get:
      tags:
        - AdminUser
      summary: Get profile by Id
      operationId: getUserById_1
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserResponseDTO"
  "/api/v1/admin/cards/{cardId}":
    delete:
      tags:
        - AdminCard
      summary: Delete a card
      operationId: deleteCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
components:
  schemas:
    CardDepositRequestDTO:
      required:
        - amount
        - cardId
      type: object
      properties:
        cardId:
          type: integer
          format: int64
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
    UserStatusUpdateRequestDTO:
      type: object
      properties:
        enable:
          type: boolean
    UserRoleUpdateRequestDTO:
      required:
        - roles
      type: object
      properties:
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
    CardStatusUpdateRequestDTO:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - DELETED
            - EXPIRED
    CardTransferRequestDTO:
      required:
        - amount
        - fromCardId
        - toCardId
      type: object
      properties:
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
    RefreshTokenRequestDTO:
      required:
        - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
    UserAuthResponseDTO:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    UserRegisterRequestDTO:
      required:
        - fullName
        - password
      type: object
      properties:
        phone:
          pattern: "^\\+?[0-9]{11}$"
          type: string
        fullName:
          maxLength: 50
          minLength: 2
          pattern: "^[A-Za-zА-Яа-яЁё\\s'-]+$"
          type: string
        password:
          maxLength: 50
          minLength: 6
          type: string
    UserAuthRequestDTO:
      required:
        - password
      type: object
      properties:
        phone:
          pattern: "^\\+?[0-9]{11}$"
          type: string
        password:
          maxLength: 50
          minLength: 6
          type: string
    CardRequestDTO:
      required:
        - ownerId
      type: object
      properties:
        ownerId:
          type: integer
          format: int64
    CardSimpleResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64
        maskedNumber:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - DELETED
            - EXPIRED
        balance:
          type: number
    PageCardSimpleResponseDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/CardSimpleResponseDTO"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          "$ref": "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    UserResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string
        phone:
          type: string
    PageTransferResponseDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/TransferResponseDTO"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    TransferResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
        createdAt:
          type: string
          format: date-time
    PageUserResponseDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/UserResponseDTO"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
